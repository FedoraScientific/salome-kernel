/*!

\page UnitTests Source code structuration and Unit Tests

<b>WORK in PROGRESS, INCOMPLETE DOCUMENT</b>

You will find here general information on code directories structure,
unit tests associated to the different kind of classes, and how to run
the unit tests.

\section S1_unit SALOME KERNEL source code structuration

\subsection sub11 General structure of KERNEL_SRC

- KERNEL_SRC :\n
   Some README files and configuration tools for build

- KERNEL_SRC/bin :\n
   Python and shell scripts used at run time.
   Kit to install a %SALOME Application.

- KERNEL_SRC/doc :\n
   Kit for KERNEL end user documentation production:
   public interfaces, Python, CORBA.
   Integrator and Developper documentation.

- KERNEL_SRC/idl :\n
   All CORBA interfaces from KERNEL are regrouped here.

- KERNEL_SRC/resources :\n
   Configuration files for servers (examples).
   Interfaces definitions for KERNEL test components.

- KERNEL_SRC/salome_adm :\n
   Configuration files used by CMake (*.cmake files)

- KERNEL_SRC/src :\n
   The source code (C++ and Python)

\subsection sub12 Directory src: C++ and Python source code

<ol>
<li>
<b>Basic services non related to CORBA</b>

- Basics\n
  %A set of general purpose C++ services, not related to CORBA.
  Some general purpose services that are in Utils directory (CORBA related),
  are progressivley moved here, as they are not related to CORBA.
  

- SALOMELocalTrace\n
  %A multithread trace system that allows message tracing on standard error
  or a file. 

- CASCatch\n
  Exceptions and signal handler.

- HDFPersist\n
  %A C++ interface to HDF.

</li>

<li>
<b>Basic CORBA services</b>

- Logger :\n
  %A CORBA %server that collects the trace messages from differents CORBA 
  process. 

- SALOMETraceCollector :\n
  %A multithread trace system derived from SALOMELocalTrace, that sends messages
  to Logger %server via CORBA.

- Utils :\n
  %A set of general purpose services related to CORBA, such as basic CORBA
  exception system. See also Basics directory above.

- NamingService :\n
  C++ and Python interfaces to name, store and retrieve CORBA objects

- GenericObj :\n
  %A generic CORBA interface for CORBA objects, to count distributed references,
  and to allow destruction by client. 

</li>
<li>
<b>Miscellaneous CORBA servers</b>

- %Registry :\n
  Implements SALOME_registry.idl.
  Provides a CORBA %server library and a separate %server program.

- ModuleCatalog :\n
  Implements SALOME_moduleCatalog.idl.
  Provide a CORBA %server library and separate %server and client programs.

- ModuleGenerator :\n
  Tool to generate a module catalog from CORBA idl

- ResourcesManager :\n
  library included in container %server

- Notification :\n
  library included in differents servers (container)

- NOTIFICATION_SWIG

</li>

<li>
<b>CORBA Containers for %SALOME Modules</b>

- Container

- TestContainer

- LifeCycleCORBA

- LifeCycleCORBA_SWIG

</li>

<li>
<b>STUDY %server and related interfaces and tools</b>

- SALOMEDSClient

- TOOLSDS

- SALOMEDSImpl

- %SALOMEDS

</li>
<li>
<b>Python interface to %SALOME</b>
 
- KERNEL_PY

</li>
<li>
<b>Efficient CORBA transfer services</b>

- Communication

- Communication_SWIG

</li>
<li>
<b>%A Parallel container with MPI</b>

- MPIContainer

- TestMPIContainer

</li>

<li>
<b>Unit tests</b>

- UnitTests

</li>
</ol>
</li>
</ol>

\section S2_unit Tools and principles used for Unit testing

<b>TO BE COMPLETED</b>

Unit Testing rely on cppunit package for C++ testing, and on unittest module
for Python. See these products for general principles of unit testing.

The cppunit package is optional. When the prerequisite is detected, the unit
tests are compiled.

Unit Tests sources are in directories Test under the src/directories
containing the classes to test.

Test are ordered following the order of directories given above.

Tests can be run as a whole, or for a particular directory. In this case, only
a partial test is run (the classes to test, and the classes used, i.e. the 
preceding test directories).


Today, only some tests are written as an example. There are not yet python
scripts in KERNEL_SRC, but it's a matter of days, there are working scripts
to test LifeCycleCORBA_SWIG interface.

*/
