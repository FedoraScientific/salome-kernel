/*!

\page running_salome_page Running Salome

There are three ways to run %SALOME:

\section S1_run_sal Using the "salome" command

%A simply %SALOME application is defined by :
- a set of modules (GEOM, SMESH, YACS, ...)
- a profile: set of informatic resources (images, documentation, tests...) binding the modules together
- "salome" command is a launcher as a python script that creates a context (set of environment variables usable by the SALOME modules) and runs an instance of SALOME, for more details see \ref salome_command.

How to generation of a profile of an application ?

The user can generate a default profile for its application using the following command:
\code
python ${KERNEL_ROOT_DIR}/bin/salome/app-quickstart.py --prefix=<generation directory> --name=<application's name> --modules=<list,of,modules>
\endcode

Likely, the user would like to personalize its application's profile. Then, the profile
can be compiled using the standard cmake procedure:

\code
cmake
make
make install
\endcode

This profile can be used within a python launcher - like the \subpage salome_command - by setting
context variable <b>SalomeAppConfig</b> to the path where the profile is installed.

\section S2_run_sal Using Salome Application Concept approach

For more details see \ref SALOME_Application.

\section S3_run_sal Using "runSalome" script supplied with SALOME KERNEL module distribution

To launch %SALOME using \c %runSalome script, you have first to
set-up proper environment for %SALOME. If you installed %SALOME using
%SALOME Installation Wizard (Linux), you can use \c salome.sh or
\c salome.csh script (that is located in the \c KERNEL_&lt;version&gt;
directory of your %SALOME installation), for example:

\code
cd /home/user/salome_6.5.0/KERNEL_6.5.0
source salome.csh
\endcode

Launch %SALOME session using the \c %runSalome script located
in the \c SALOME/KERNEL/bin/salome directory:

\code
runSalome [options] [STUDY_FILE] [PYTHON_FILE [PYTHON_FILE ...]]
\endcode

Optionally, you can specify in the command line:
- Study (document) file to be opened in %SALOME session passing;
- One or more Python scripts to be executed after %SALOME
  start-up. Python scripts will be executed in the new or opened study
  in the order they appear in the command line.

The \c %runSalome script supports large set of options that allow
specifying the way to launch %SALOME session. Complete description of
all options can be obtained using \c --help or -h option:

\code
runSalome --help
\endcode

Here below is a description of most important options:

- \c --help or \c -h

Print detail help information on the \c %runSalome script.

- \c --version

Print version of %SALOME platform.

- \c --gui or \c -g

Launch %SALOME sesssion in GUI mode (with GUI desktop).

- \c --terminal or \c -t

Launch %SALOME session in terminal mode (without GUI).

- \c --resources=&lt;file&gt; or \c -r \c &lt;file&gt;

Parse application settings from the &lt;file&gt; instead of default resource
file. Default resource file is situated in user's home directory; for
example, for %SALOME version 6.5.0, the file is ${HOME}/.config/salome/.SalomeApprc.6.5.0 

- \c --modules=module1,module2,... or \c -m=module1,module2,...

Specify the list of modules which will be used in the %SALOME session
being launched. Note, that list of modules is separated be comma
symbols, with no any spaces.

- \c --xterm or \c -x

The servers open in separate terminal window and log messages are displayed in this window.

- <code>--embedded=registry,study,moduleCatalog,cppContainer/</code> or
  <code>-e=registry,study,moduleCatalog,cppContainer</code>

Run listed %SALOME servers in the GUI embedded mode (default value is
<code>registry,study,moduleCatalog,cppContainer</code>). Note that logger
server cannot be embedded to GUI. Note, that this option implies running %SALOME in GUI mode (\c -g
option); in terminal mode all servers are running in standalone mode.

- <code>--standalone=registry,study,moduleCatalog,cppContainerr</code> or
  <code>-s=registry,study,moduleCatalog,cppContainer</code>

Standalone CORBA servers (default: none).

- \c --portkill or \c -p

Kill %SALOME session launched with the current port.

- \c --killall or \c -k

Kill (stop) all running %SALOME sessions before launching new session.

- \c --splash=&lt;1/0&gt; or \c -z &lt;1/0&gt;

Use 1 to display splash screen [default] at start-up, 0 to disable
splash screen. This option is ignored in the terminal mode.

- \c --pinter

Launch with interactive Python console.

- <code>--interp=n</code> or <code>-i=n</code>

Number of additional Python interpreters to open, with session
environment propely set-up.

*/
