//=============================================================================
// File      : SALOME_Component.idl
// Created   : jeu jui 12 08:11:23 CEST 2001
// Author    : Paul RASCLE, EDF
// Project   : SALOME
// Copyright : EDF 2001
// $Header: /dn05/salome/CVS/SALOME_ROOT/idl/SALOME_Component.idl
//=============================================================================

#ifndef _SALOME_COMPONENT_IDL_
#define _SALOME_COMPONENT_IDL_
/*!  \ingroup Kernel 

This is a package of interfaces used for connecting new components to %SALOME application. It also contains a set of interfaces used
for management of %MED component in %SALOME application.
*/
module Engines
{
  interface Component ;

/*! \brief Interface of the %Container

   This interface defines the process of loading and registration
    of new components in SALOME application
*/
  interface Container
  {
/*!
    Initializes the %container with a definite name.
*/
    Container start_impl( in string ContainerName ) ;

/*!
    Loads into the container a new component, registers it and starts it's CORBA servant.
    \param nameToRegister     Name of the component which will be registered in Registry (or Name Service)
    \param componentName     Name of the constructed library of the %component
*/
    Component load_impl(in string nameToRegister, in string componentName);

/*!
       Stops the component servant, and deletes all related objects
*/
    void remove_impl(in Component component_i);

/*!
    Discharges all components from the container.
*/
    void finalize_removal() ;
/*!
     Determines whether the server has been loaded or not.
*/

    void ping();
/*!
   Name of the %container
*/
    readonly attribute string name ;
/*!
   Name of the machine containing this container (location of the container).
*/
    readonly attribute string machineName ;
/*!
   Returns True if the %container has been killed
*/
    boolean Kill_impl() ;
  };
/*! \brief Interface of the %component

    This interface is used for interaction between the %container and the %component and between
    the components inside the container.
*/
  interface Component
  {
/*!
   The name of the instance of the %Component
*/
    readonly attribute string instanceName ;
/*!
   The name of the interface of the %Component
*/
    readonly attribute string interfaceName ;
/*!
    Determines whether the server has already been loaded or not.
*/
    void ping();
/*!
    Deactivates the %Component.
*/
    void destroy() ;
/*!
    Returns the container that the %Component refers to.
*/
    Container GetContainerRef() ;
/*!
   This method is used by the %SUPERVISOR component. It sets the names of the graph and of the node.
*/
    void Names( in string aGraphName , in string aNodeName ) ;
/*!
   Returns True if the %Component has been killed.
*/
    boolean Kill_impl() ;
/*!
   Returns True if the activity of the %Component has been stopped. (It's action can't be resumed)
*/
    boolean Stop_impl() ;
/*!
   Returns True if the activity of the %Component has been suspended. (It's action can be resumed)
*/
    boolean Suspend_impl() ;
/*!
   Returns True if the activity of the %Component has been resumed.
*/
    boolean Resume_impl() ;
  } ;
} ;

#endif
